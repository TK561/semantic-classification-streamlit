name: Claude Code Integration Workflow

# Claude Code で作成・編集されたファイルの自動処理ワークフロー
on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.py'
      - '**/*.md'
      - '**/*.txt'
      - '**/*.json'
      - '**/*.yml'
      - '**/*.yaml'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run full test suite'
        required: false
        default: 'true'
        type: boolean
      deploy_docs:
        description: 'Deploy documentation'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Claude Code で作成されたコードの品質チェック
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Generated with [Claude Code]') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pytest pytest-cov
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: 🎨 Code Formatting Check (Black)
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: 📏 Import Sorting Check (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true
    
    - name: 🔍 Lint with Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🏷️ Type Checking (MyPy)
      run: |
        mypy . --ignore-missing-imports || true
    
    - name: 📊 Upload Code Quality Report
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: |
          **/*.log
          **/*.txt
      if: always()

  # Python プロジェクトのテスト実行
  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Generated with [Claude Code]') || github.event_name == 'workflow_dispatch'
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: 🧪 Run Tests
      run: |
        if [ -d "tests" ] || [ -f "test_*.py" ] || [ -f "*_test.py" ]; then
          pytest --cov=. --cov-report=xml --cov-report=html -v
        else
          echo "No tests found - creating basic smoke test"
          python -c "
import sys
import importlib.util
import os

# 基本的なスモークテスト
print('🔥 Running smoke tests...')
for root, dirs, files in os.walk('.'):
    for file in files:
        if file.endswith('.py') and not file.startswith('test_'):
            filepath = os.path.join(root, file)
            try:
                spec = importlib.util.spec_from_file_location('module', filepath)
                if spec and spec.loader:
                    module = importlib.util.module_from_spec(spec)
                    print(f'✅ {filepath} - syntax OK')
                else:
                    print(f'⚠️ {filepath} - could not load spec')
            except Exception as e:
                print(f'❌ {filepath} - error: {e}')
                sys.exit(1)
print('🎉 All Python files passed smoke test!')
"
        fi
    
    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      if: matrix.python-version == '3.9'

  # セキュリティスキャン
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Generated with [Claude Code]') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔒 Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: 🛡️ Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
    
    - name: 🔍 Check Dependencies for Vulnerabilities
      run: |
        if [ -f requirements.txt ]; then
          safety check -r requirements.txt --json > safety-report.json || true
          safety check -r requirements.txt || true
        fi
      continue-on-error: true
    
    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  # ドキュメント生成とデプロイ
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📚 Install Documentation Tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: 📖 Generate API Documentation
      run: |
        # Sphinx documentation
        if [ ! -d "docs" ]; then
          mkdir docs
          sphinx-quickstart -q -p "Claude Code Project" -a "Claude & User" -v "1.0" docs
        fi
        
        # Auto-generate module documentation
        find . -name "*.py" -not -path "./.*" | head -10 | while read file; do
          echo "Documenting: $file"
        done
        
        # MkDocs documentation
        if [ ! -f "mkdocs.yml" ]; then
          cat > mkdocs.yml << EOF
site_name: Claude Code Project Documentation
site_description: Documentation for Claude Code generated project
theme:
  name: material
  palette:
    primary: blue
    accent: blue
nav:
  - Home: index.md
  - API Reference: api.md
  - Usage Guide: usage.md
plugins:
  - search
  - mermaid2
EOF
        fi
        
        # Generate basic documentation
        cat > docs/index.md << EOF
# Claude Code Project Documentation

This project was generated and enhanced using Claude Code.

## Features

$(grep -h "^# " README.md 2>/dev/null || echo "- Automated code generation")
$(grep -h "^## " README.md 2>/dev/null || echo "- AI-assisted development")

## Getting Started

\`\`\`bash
pip install -r requirements.txt
python main.py
\`\`\`

## Files Generated by Claude Code

$(find . -name "*.py" -exec basename {} \; | sed 's/^/- /' | head -10)

Generated on: $(date)
EOF
    
    - name: 🚀 Deploy Documentation
      if: github.event.inputs.deploy_docs == 'true' || github.event_name == 'push'
      run: |
        # GitHub Pages deployment would go here
        echo "Documentation generated successfully"
        echo "Files available in docs/ directory"
    
    - name: 📊 Upload Documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/

  # プロジェクト統計とレポート生成
  project-analytics:
    name: Project Analytics
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 📊 Generate Project Statistics
      run: |
        echo "# Claude Code Project Analytics Report" > project-report.md
        echo "Generated on: $(date)" >> project-report.md
        echo "" >> project-report.md
        
        echo "## Repository Statistics" >> project-report.md
        echo "- Total commits: $(git rev-list --all --count)" >> project-report.md
        echo "- Total files: $(find . -type f | wc -l)" >> project-report.md
        echo "- Python files: $(find . -name "*.py" | wc -l)" >> project-report.md
        echo "- Documentation files: $(find . -name "*.md" | wc -l)" >> project-report.md
        echo "" >> project-report.md
        
        echo "## Code Statistics" >> project-report.md
        if command -v cloc &> /dev/null; then
          cloc . --md >> project-report.md
        else
          echo "- Lines of Python code: $(find . -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')" >> project-report.md
        fi
        echo "" >> project-report.md
        
        echo "## Recent Claude Code Commits" >> project-report.md
        git log --oneline --grep="Generated with \[Claude Code\]" -10 >> project-report.md || echo "No Claude Code commits found" >> project-report.md
        echo "" >> project-report.md
        
        echo "## File Structure" >> project-report.md
        echo "\`\`\`" >> project-report.md
        tree -L 3 -I '__pycache__|*.pyc|.git' . >> project-report.md 2>/dev/null || find . -type d -not -path '*/\.*' | head -20 | sed 's/^/  /' >> project-report.md
        echo "\`\`\`" >> project-report.md
    
    - name: 📊 Upload Analytics Report
      uses: actions/upload-artifact@v3
      with:
        name: project-analytics
        path: project-report.md

  # 成功通知
  notify-success:
    name: Workflow Success Notification
    runs-on: ubuntu-latest
    needs: [code-quality, test-python, security-scan, documentation, project-analytics]
    if: always() && (needs.code-quality.result == 'success' || needs.test-python.result == 'success')
    
    steps:
    - name: 🎉 Success Notification
      run: |
        echo "🚀 Claude Code Integration Workflow completed successfully!"
        echo "✅ Code quality checks passed"
        echo "✅ Tests executed"
        echo "✅ Security scans completed"
        echo "✅ Documentation generated"
        echo "📊 Project analytics created"
        
        echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Triggered by: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code detected: ${{ contains(github.event.head_commit.message, 'Generated with [Claude Code]') }}" >> $GITHUB_STEP_SUMMARY

  # 失敗時の詳細レポート
  failure-analysis:
    name: Failure Analysis
    runs-on: ubuntu-latest
    needs: [code-quality, test-python, security-scan]
    if: always() && (needs.code-quality.result == 'failure' || needs.test-python.result == 'failure' || needs.security-scan.result == 'failure')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Analyze Failures
      run: |
        echo "❌ Workflow Analysis - Some jobs failed"
        echo "## Failure Analysis Report" >> failure-report.md
        echo "Generated on: $(date)" >> failure-report.md
        echo "" >> failure-report.md
        
        echo "### Job Results:" >> failure-report.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> failure-report.md
        echo "- Python Tests: ${{ needs.test-python.result }}" >> failure-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> failure-report.md
        echo "" >> failure-report.md
        
        echo "### Common Solutions:" >> failure-report.md
        echo "1. Check Python syntax and imports" >> failure-report.md
        echo "2. Ensure all dependencies are in requirements.txt" >> failure-report.md
        echo "3. Review security scan findings" >> failure-report.md
        echo "4. Verify code formatting (black, isort)" >> failure-report.md
        echo "" >> failure-report.md
        
        echo "### Next Steps:" >> failure-report.md
        echo "1. Review the failed job logs" >> failure-report.md
        echo "2. Fix the identified issues" >> failure-report.md
        echo "3. Push changes to trigger a new workflow run" >> failure-report.md
    
    - name: 📊 Upload Failure Report
      uses: actions/upload-artifact@v3
      with:
        name: failure-analysis
        path: failure-report.md

# カスタムアクション: Claude Code 検出
  claude-code-detector:
    name: Claude Code Detection
    runs-on: ubuntu-latest
    outputs:
      claude-detected: ${{ steps.detect.outputs.claude-detected }}
      file-count: ${{ steps.detect.outputs.file-count }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Detect Claude Code
      id: detect
      run: |
        CLAUDE_FILES=0
        TOTAL_FILES=0
        
        # Claude Codeのシグネチャを検索
        for file in $(find . -name "*.py" -o -name "*.md" -o -name "*.txt"); do
          TOTAL_FILES=$((TOTAL_FILES + 1))
          if grep -l "Claude Code\|Co-Authored-By: Claude" "$file" >/dev/null 2>&1; then
            CLAUDE_FILES=$((CLAUDE_FILES + 1))
            echo "Claude Code detected in: $file"
          fi
        done
        
        CLAUDE_DETECTED="false"
        if [ $CLAUDE_FILES -gt 0 ] || grep -q "Generated with \[Claude Code\]" <<< "${{ github.event.head_commit.message }}"; then
          CLAUDE_DETECTED="true"
        fi
        
        echo "claude-detected=$CLAUDE_DETECTED" >> $GITHUB_OUTPUT
        echo "file-count=$CLAUDE_FILES" >> $GITHUB_OUTPUT
        
        echo "## Claude Code Detection Results" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code files detected: $CLAUDE_FILES out of $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code commit detected: $CLAUDE_DETECTED" >> $GITHUB_STEP_SUMMARY