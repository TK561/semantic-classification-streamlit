name: Claude Code Research Review

# Á†îÁ©∂„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁî® Claude Code „É¨„Éì„É•„Éº„ÉØ„Éº„ÇØ„Éï„É≠„Éº
# Á†îÁ©∂„Éá„Éº„Çø„ÄÅ„Ç≥„Éº„Éâ„ÄÅË´ñÊñá„ÅÆÂìÅË≥™ÁÆ°ÁêÜ„Å®Ëá™ÂãïÂåñ

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**/*.py'
      - '**/*.ipynb'
      - '**/*.md'
      - '**/*.tex'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
      - 'data/**'
      - 'notebooks/**'
      - 'results/**'
  pull_request:
    branches: [ main, master ]
  schedule:
    # ÊØéÊó•ÂçàÂâç6ÊôÇÔºàUTCÔºâ„Å´ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØ
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      full_analysis:
        description: 'Run full research analysis'
        required: false
        default: 'false'
        type: boolean
      generate_report:
        description: 'Generate comprehensive research report'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  RESEARCH_PROJECT: 'semantic-classification-system'

jobs:
  # Claude CodeÁîüÊàê„Ç≥„Éº„Éâ„ÅÆÊ§úÂá∫„Å®ÂàÜÊûê
  claude-code-detection:
    name: Claude Code Detection & Analysis
    runs-on: ubuntu-latest
    outputs:
      claude-detected: ${{ steps.detect.outputs.claude-detected }}
      research-files: ${{ steps.detect.outputs.research-files }}
      experiment-files: ${{ steps.detect.outputs.experiment-files }}
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üîç Detect Claude Code and Research Files
      id: detect
      run: |
        echo "üî¨ Analyzing research project structure..."
        
        # Claude Code „Ç∑„Ç∞„Éç„ÉÅ„É£Ê§úÂá∫
        CLAUDE_FILES=0
        RESEARCH_FILES=0
        EXPERIMENT_FILES=0
        
        # Python/Notebook „Éï„Ç°„Ç§„É´„ÅÆÂàÜÊûê
        for file in $(find . -name "*.py" -o -name "*.ipynb" -o -name "*.md"); do
          if [[ -f "$file" ]]; then
            RESEARCH_FILES=$((RESEARCH_FILES + 1))
            
            # Claude Code „Ç∑„Ç∞„Éç„ÉÅ„É£Ê§úÁ¥¢
            if grep -l "Generated with Claude Code\|Co-Authored-By: Claude" "$file" >/dev/null 2>&1; then
              CLAUDE_FILES=$((CLAUDE_FILES + 1))
              echo "Claude Code detected: $file"
            fi
            
            # ÂÆüÈ®ì„Éï„Ç°„Ç§„É´Ê§úÂá∫
            if [[ "$file" == *"experiment"* ]] || [[ "$file" == *"notebook"* ]] || [[ "$file" == *"analysis"* ]]; then
              EXPERIMENT_FILES=$((EXPERIMENT_FILES + 1))
            fi
          fi
        done
        
        # ÁµêÊûúË®≠ÂÆö
        CLAUDE_DETECTED="false"
        if [ $CLAUDE_FILES -gt 0 ] || grep -q "Generated with.*Claude Code" <<< "${{ github.event.head_commit.message }}"; then
          CLAUDE_DETECTED="true"
        fi
        
        echo "claude-detected=$CLAUDE_DETECTED" >> $GITHUB_OUTPUT
        echo "research-files=$RESEARCH_FILES" >> $GITHUB_OUTPUT
        echo "experiment-files=$EXPERIMENT_FILES" >> $GITHUB_OUTPUT
        
        # „Çµ„Éû„É™„ÉºÂá∫Âäõ
        echo "## Claude Code Detection Results" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code files: $CLAUDE_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- Research files: $RESEARCH_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- Experiment files: $EXPERIMENT_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code commit: $CLAUDE_DETECTED" >> $GITHUB_STEP_SUMMARY

  # Á†îÁ©∂„Ç≥„Éº„Éâ„ÅÆÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
  research-code-quality:
    name: Research Code Quality Check
    runs-on: ubuntu-latest
    needs: claude-code-detection
    if: needs.claude-code-detection.outputs.claude-detected == 'true'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Á†îÁ©∂Áî®„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´
        pip install black isort flake8 mypy pytest nbqa jupyter
        
        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂõ∫Êúâ„ÅÆ‰æùÂ≠òÈñ¢‰øÇ
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Á†îÁ©∂Áî®ËøΩÂä†„Éë„ÉÉ„Ç±„Éº„Ç∏
        pip install numpy pandas matplotlib seaborn scikit-learn
    
    - name: üé® Format Check (Black)
      run: |
        echo "üé® Checking Python code formatting..."
        black --check --diff . || echo "Some files need formatting"
        
        # Jupyter Notebook formatting
        if [ -d "notebooks" ]; then
          nbqa black notebooks/ || echo "Some notebooks need formatting"
        fi
    
    - name: üìè Import Sorting (isort)
      run: |
        echo "üìè Checking import sorting..."
        isort --check-only --diff . || echo "Some imports need sorting"
    
    - name: üîç Lint with Flake8
      run: |
        echo "üîç Running code linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        # Á†îÁ©∂„Ç≥„Éº„ÉâÁâπÊúâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
        flake8 . --select=W503,E203 --statistics || true
    
    - name: üè∑Ô∏è Type Checking (MyPy)
      run: |
        echo "üè∑Ô∏è Running type checking..."
        mypy . --ignore-missing-imports --show-error-codes || true
    
    - name: üìî Notebook Quality Check
      run: |
        if [ -d "notebooks" ]; then
          echo "üìî Checking Jupyter notebooks..."
          
          # Notebook linting
          nbqa flake8 notebooks/ --ignore=E501,W503 || true
          
          # Check for output cells (Á†îÁ©∂„Éé„Éº„Éà„Éñ„ÉÉ„ÇØ„Åß„ÅØË®±ÂèØ)
          find notebooks/ -name "*.ipynb" -exec echo "Checking: {}" \;
        fi

  # Á†îÁ©∂ÂÆüÈ®ì„ÅÆÊ§úË®º
  research-experiments:
    name: Research Experiments Validation
    runs-on: ubuntu-latest
    needs: claude-code-detection
    if: needs.claude-code-detection.outputs.experiment-files != '0'
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üêç Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: üì¶ Install Research Dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Âü∫Êú¨ÁöÑ„Å™Á†îÁ©∂„Éë„ÉÉ„Ç±„Éº„Ç∏
        pip install numpy pandas matplotlib seaborn scikit-learn
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install transformers pillow opencv-python
        
        # „ÉÜ„Çπ„Éà„ÉªÊ§úË®ºÁî®
        pip install pytest pytest-cov nbval
        
        # „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰æùÂ≠òÈñ¢‰øÇ
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: üß™ Run Research Code Tests
      run: |
        echo "üß™ Running research code validation..."
        
        # Âü∫Êú¨ÁöÑ„Å™„Ç≥„Éº„ÉâÂÆüË°å„ÉÜ„Çπ„Éà
        if [ -d "src" ]; then
          python -m pytest src/ -v || true
        fi
        
        # „Çπ„ÇØ„É™„Éó„Éà„ÅÆÊßãÊñá„ÉÅ„Çß„ÉÉ„ÇØ
        find . -name "*.py" -not -path "./.venv/*" | head -20 | while read file; do
          echo "Syntax check: $file"
          python -m py_compile "$file" || echo "Syntax error in $file"
        done
    
    - name: üìî Validate Notebooks
      run: |
        if [ -d "notebooks" ]; then
          echo "üìî Validating Jupyter notebooks..."
          
          # „Éé„Éº„Éà„Éñ„ÉÉ„ÇØ„ÅÆÂÆüË°åÂèØËÉΩÊÄß„ÉÅ„Çß„ÉÉ„ÇØÔºàËªΩÈáèÔºâ
          find notebooks/ -name "*.ipynb" | head -5 | while read notebook; do
            echo "Validating: $notebook"
            # ÂÆüÈöõ„ÅÆÂÆüË°å„ÅØÊôÇÈñì„Åå„Åã„Åã„Çã„Åü„ÇÅ„ÄÅÊßãÊñá„ÉÅ„Çß„ÉÉ„ÇØ„ÅÆ„Åø
            jupyter nbconvert --to script "$notebook" --stdout > /dev/null || echo "Issues in $notebook"
          done
        fi
    
    - name: üìä Research Data Validation
      run: |
        echo "üìä Validating research data structure..."
        
        # „Éá„Éº„Çø„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÉÅ„Çß„ÉÉ„ÇØ
        for dir in data results figures notebooks; do
          if [ -d "$dir" ]; then
            echo "‚úÖ $dir directory exists"
            find "$dir" -type f | wc -l | xargs echo "Files in $dir:"
          else
            echo "‚ö†Ô∏è $dir directory missing"
          fi
        done
        
        # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
        for file in config.py requirements.txt README.md; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ö†Ô∏è $file missing"
          fi
        done

  # Á†îÁ©∂„Éá„Éº„Çø„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å®ÁÆ°ÁêÜ
  research-data-management:
    name: Research Data Management
    runs-on: ubuntu-latest
    needs: claude-code-detection
    if: github.event_name == 'push' || github.event.inputs.full_analysis == 'true'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        lfs: true  # Git LFSÂØæÂøú
    
    - name: üìä Analyze Research Data
      run: |
        echo "üìä Analyzing research project data..."
        
        # „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Å®Á®ÆÈ°û„ÅÆÂàÜÊûê
        echo "## Research Data Analysis" > data-analysis.md
        echo "Generated: $(date)" >> data-analysis.md
        echo "" >> data-analysis.md
        
        # „Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÅÆÁµ±Ë®à
        echo "### Data Files Statistics" >> data-analysis.md
        for ext in py ipynb md csv json pkl txt; do
          count=$(find . -name "*.$ext" | wc -l)
          if [ $count -gt 0 ]; then
            echo "- .$ext files: $count" >> data-analysis.md
          fi
        done
        echo "" >> data-analysis.md
        
        # „Éá„Ç£„É¨„ÇØ„Éà„É™„Çµ„Ç§„Ç∫
        echo "### Directory Sizes" >> data-analysis.md
        for dir in data notebooks results src figures; do
          if [ -d "$dir" ]; then
            size=$(du -sh "$dir" 2>/dev/null | cut -f1)
            echo "- $dir: $size" >> data-analysis.md
          fi
        done
        echo "" >> data-analysis.md
        
        # ÊúÄÂ§ß„Éï„Ç°„Ç§„É´
        echo "### Largest Files" >> data-analysis.md
        find . -type f -not -path "./.git/*" -exec ls -lh {} \; | sort -k5 -hr | head -10 | while read line; do
          echo "- $line" >> data-analysis.md
        done
    
    - name: üîê Check for Sensitive Data
      run: |
        echo "üîê Checking for sensitive research data..."
        
        # Ê©üÂØÜÊÉÖÂ†±„Éë„Çø„Éº„É≥„ÅÆÊ§úÁ¥¢
        SENSITIVE_FOUND=false
        
        # API„Ç≠„ÉºÁ≠â„ÅÆ„Éë„Çø„Éº„É≥
        if grep -r "api_key\|API_KEY\|secret\|SECRET\|password\|PASSWORD" . --exclude-dir=.git || true; then
          echo "‚ö†Ô∏è Potential sensitive data found"
          SENSITIVE_FOUND=true
        fi
        
        # Â§ß„Åç„Å™„Éê„Ç§„Éä„É™„Éï„Ç°„Ç§„É´
        find . -type f -size +100M -not -path "./.git/*" | while read file; do
          echo "‚ö†Ô∏è Large file detected: $file"
          SENSITIVE_FOUND=true
        done
        
        if [ "$SENSITIVE_FOUND" = false ]; then
          echo "‚úÖ No sensitive data detected"
        fi
    
    - name: üíæ Create Research Backup
      run: |
        echo "üíæ Creating research backup..."
        
        # ÈáçË¶Å„Éï„Ç°„Ç§„É´„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê
        mkdir -p backup
        
        # Ë®≠ÂÆö„Å®„Çπ„ÇØ„É™„Éó„Éà
        cp *.py backup/ 2>/dev/null || true
        cp *.md backup/ 2>/dev/null || true
        cp requirements.txt backup/ 2>/dev/null || true
        
        # notebooks „ÅÆËªΩÈáè„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÔºàÂá∫Âäõ„Çª„É´Èô§ÂéªÔºâ
        if [ -d "notebooks" ]; then
          mkdir -p backup/notebooks
          find notebooks/ -name "*.ipynb" | while read notebook; do
            # Âá∫Âäõ„Çª„É´„ÇíÈô§Âéª„Åó„Åü„ÇØ„É™„Éº„É≥„Å™„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
            if command -v jupyter >/dev/null 2>&1; then
              jupyter nbconvert --clear-output --to notebook "$notebook" --output-dir backup/notebooks/ 2>/dev/null || cp "$notebook" backup/notebooks/
            else
              cp "$notebook" backup/notebooks/
            fi
          done
        fi
        
        # „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çµ„Éû„É™„Éº
        echo "Backup created: $(ls -la backup/ | wc -l) files"
    
    - name: üì§ Upload Research Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: research-data-analysis
        path: |
          data-analysis.md
          backup/
        retention-days: 30

  # Á†îÁ©∂ÈÄ≤Êçó„É¨„Éù„Éº„Éà„ÅÆÁîüÊàê
  research-progress-report:
    name: Research Progress Report
    runs-on: ubuntu-latest
    needs: [claude-code-detection, research-code-quality, research-experiments]
    if: always() && (github.event.inputs.generate_report == 'true' || github.event_name == 'schedule')
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üìä Generate Research Progress Report
      run: |
        echo "üìä Generating comprehensive research progress report..."
        
        # „É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´‰ΩúÊàê
        cat > research-progress-report.md << 'EOF'
# üî¨ Research Progress Report
        
## Project Overview
- **Project**: Semantic Classification System Research
- **Generated**: $(date)
- **Repository**: ${{ github.repository }}
- **Latest Commit**: ${{ github.sha }}

## Claude Code Integration Analysis
        
### Detection Results
EOF
        
        # Claude Code Ê§úÂá∫ÁµêÊûú
        echo "- Claude Code files detected: ${{ needs.claude-code-detection.outputs.claude-detected }}" >> research-progress-report.md
        echo "- Research files count: ${{ needs.claude-code-detection.outputs.research-files }}" >> research-progress-report.md
        echo "- Experiment files count: ${{ needs.claude-code-detection.outputs.experiment-files }}" >> research-progress-report.md
        echo "" >> research-progress-report.md
        
        # „Ç≥„Éü„ÉÉ„ÉàÂ±•Ê≠¥ÂàÜÊûê
        echo "### Recent Research Activity" >> research-progress-report.md
        git log --oneline --grep="ÂÆüÈ®ì\|experiment\|analysis\|Á†îÁ©∂" -10 >> research-progress-report.md || echo "No research commits found" >> research-progress-report.md
        echo "" >> research-progress-report.md
        
        # „Éï„Ç°„Ç§„É´ÊßãÈÄ†ÂàÜÊûê
        echo "### Project Structure" >> research-progress-report.md
        echo "\`\`\`" >> research-progress-report.md
        tree -L 3 -I '__pycache__|*.pyc|.git|venv' . >> research-progress-report.md 2>/dev/null || find . -type d -not -path '*/\.*' | head -20 | sed 's/^/  /' >> research-progress-report.md
        echo "\`\`\`" >> research-progress-report.md
        echo "" >> research-progress-report.md
        
        # ÂìÅË≥™„É°„Éà„É™„ÇØ„Çπ
        echo "### Code Quality Metrics" >> research-progress-report.md
        echo "- Code quality check: ${{ needs.research-code-quality.result }}" >> research-progress-report.md
        echo "- Experiment validation: ${{ needs.research-experiments.result }}" >> research-progress-report.md
        echo "" >> research-progress-report.md
        
        # Python „Éï„Ç°„Ç§„É´Áµ±Ë®à
        echo "### Code Statistics" >> research-progress-report.md
        echo "- Python files: $(find . -name "*.py" | wc -l)" >> research-progress-report.md
        echo "- Jupyter notebooks: $(find . -name "*.ipynb" | wc -l)" >> research-progress-report.md
        echo "- Documentation files: $(find . -name "*.md" | wc -l)" >> research-progress-report.md
        echo "- Total lines of Python code: $(find . -name "*.py" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo 'N/A')" >> research-progress-report.md
        echo "" >> research-progress-report.md
        
        # Êé®Â•®ÊîπÂñÑ‰∫ãÈ†Ö
        echo "### Recommendations" >> research-progress-report.md
        echo "- [ ] Regular code formatting with Black" >> research-progress-report.md
        echo "- [ ] Comprehensive test coverage for research code" >> research-progress-report.md
        echo "- [ ] Documentation updates for new experiments" >> research-progress-report.md
        echo "- [ ] Data backup and version control" >> research-progress-report.md
        echo "" >> research-progress-report.md
        
        # „Éï„ÉÉ„Çø„Éº
        echo "---" >> research-progress-report.md
        echo "*Generated by Claude Code Research Review Workflow*" >> research-progress-report.md
        echo "*Timestamp: $(date)*" >> research-progress-report.md
    
    - name: üìà Generate Research Metrics
      run: |
        echo "üìà Generating research metrics..."
        
        # ÂÆüÈ®ì„É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆÂàÜÊûê
        if [ -f "experiments.json" ]; then
          echo "## Experiment Log Analysis" >> research-progress-report.md
          python3 -c "
import json
import sys
try:
    with open('experiments.json', 'r') as f:
        experiments = json.load(f)
    print(f'- Total experiments: {len(experiments)}')
    if experiments:
        latest = experiments[-1]
        print(f'- Latest experiment: {latest.get(\"timestamp\", \"unknown\")}')
        print(f'- Latest activity: {latest.get(\"research_activity\", \"unknown\")}')
except Exception as e:
    print(f'- Experiment log analysis failed: {e}')
" >> research-progress-report.md
        else
          echo "- No experiment log found" >> research-progress-report.md
        fi
        echo "" >> research-progress-report.md
    
    - name: üì§ Upload Progress Report
      uses: actions/upload-artifact@v3
      with:
        name: research-progress-report
        path: research-progress-report.md
    
    - name: üìù Update Repository Summary
      run: |
        echo "## Latest Research Progress Report" >> $GITHUB_STEP_SUMMARY
        echo "Generated: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Key Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code integration: ${{ needs.claude-code-detection.outputs.claude-detected }}" >> $GITHUB_STEP_SUMMARY
        echo "- Research files: ${{ needs.claude-code-detection.outputs.research-files }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code quality: ${{ needs.research-code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Experiments: ${{ needs.research-experiments.result }}" >> $GITHUB_STEP_SUMMARY

  # Á†îÁ©∂ÊàêÊûú„ÅÆËá™Âãï„Éá„Éó„É≠„Ç§
  research-deployment:
    name: Research Results Deployment
    runs-on: ubuntu-latest
    needs: [research-code-quality, research-experiments]
    if: github.ref == 'refs/heads/main' && needs.research-code-quality.result == 'success'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üöÄ Deploy Research Results
      run: |
        echo "üöÄ Preparing research results for deployment..."
        
        # ÁµêÊûú„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÊ∫ñÂÇô
        mkdir -p deploy/results
        
        # ÈáçË¶Å„Å™„Éï„Ç°„Ç§„É´„Çí„Ç≥„Éî„Éº
        cp README.md deploy/ 2>/dev/null || true
        cp CLAUDE.md deploy/ 2>/dev/null || true
        
        # Âõ≥Ë°®„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
        if [ -d "figures" ]; then
          cp -r figures deploy/
        fi
        
        if [ -d "results" ]; then
          cp -r results/* deploy/results/ 2>/dev/null || true
        fi
        
        # „Éá„Éó„É≠„Ç§„Çµ„Éû„É™„Éº‰ΩúÊàê
        echo "# Research Results Deployment" > deploy/index.md
        echo "Generated: $(date)" >> deploy/index.md
        echo "" >> deploy/index.md
        echo "## Available Results" >> deploy/index.md
        find deploy/ -type f -name "*.md" -o -name "*.html" -o -name "*.png" -o -name "*.jpg" | sed 's/^deploy\//- /' >> deploy/index.md
        
        echo "Deployment prepared: $(find deploy/ -type f | wc -l) files"
    
    - name: üì§ Upload Deployment Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: research-deployment
        path: deploy/

  # ÈÄöÁü•„Å®„Çµ„Éû„É™„Éº
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [claude-code-detection, research-code-quality, research-experiments, research-data-management, research-progress-report]
    if: always()
    
    steps:
    - name: üìã Generate Workflow Summary
      run: |
        echo "# üî¨ Claude Code Research Review Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Workflow Results" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code Detection: ${{ needs.claude-code-detection.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.research-code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Experiments: ${{ needs.research-experiments.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Data Management: ${{ needs.research-data-management.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Progress Report: ${{ needs.research-progress-report.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Research Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- Claude Code detected: ${{ needs.claude-code-detection.outputs.claude-detected }}" >> $GITHUB_STEP_SUMMARY
        echo "- Research files: ${{ needs.claude-code-detection.outputs.research-files }}" >> $GITHUB_STEP_SUMMARY
        echo "- Experiment files: ${{ needs.claude-code-detection.outputs.experiment-files }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by Claude Code Research Review Workflow*" >> $GITHUB_STEP_SUMMARY